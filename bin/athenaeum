#!/usr/bin/env python
"""

    Generate Athenaeum Connection String
    ====================================

"""
import re
import argparse

import boto3


DOMAIN_MATCH = re.compile(r'/\w+\/athenaeum\/(.+)\/.+')

PREFIX = '/{stage}/athenaeum'
HOST = '/{stage}/athenaeum/host'
DB_NAME = '/{stage}/athenaeum/db_name'
PASSWORD = '/{stage}/athenaeum/password'
USER = '/{stage}/athenaeum/user'
DOMAIN_PASSWORD = '/{stage}/athenaeum/{domain}/password'
DOMAIN_USER = '/{stage}/athenaeum/{domain}/user'

CONNECTION_STR = 'postgresql://{user}:{password}@{host}/{db_name}'

SSM = boto3.client('ssm')

def main(domain, stage):
    """ Add SSM Params """
    db_name = get_param(DB_NAME.format(stage=stage))
    host = get_param(HOST.format(stage=stage))
    if domain:
        password = get_param(DOMAIN_PASSWORD.format(stage=stage,
                                                    domain=domain))
        user = get_param(DOMAIN_USER.format(stage=stage,
                                            domain=domain))
    else:
        password = get_param(PASSWORD.format(stage=stage))
        user = get_param(USER.format(stage=stage))


    conn = CONNECTION_STR.format(user=user, password=password,
                                 host=host, db_name=db_name)

    print conn


def get_param(name):
    res = SSM.get_parameter(Name=name, WithDecryption=True)
    return res['Parameter']['Value']

def _cleanse_val(val):
    """ Strips trailing/leading whitespace """
    return val.strip()


def valid_domains(stage):
    prefix = PREFIX.format(stage=stage)
    options = {'ParameterFilters': [{'Key': 'Name',
                                     'Option': 'BeginsWith',
                                     'Values': [prefix]}]}
    domains = set([])
    for page in SSM.get_paginator('describe_parameters').paginate(**options):
        for param in page['Parameters']:
            name = param['Name']
            match = DOMAIN_MATCH.match(name)
            if match:
                domains.add(match.groups()[0])
    return domains

PARSER = argparse.ArgumentParser()
PARSER.add_argument('--stage', '-s', help='stage of lambda environment',
                    required=True, choices=['dev', 'stage', 'prod'])
STAGE = PARSER.parse_known_args()[0].stage


PARSER.add_argument('--domain', '-d', help='Domain to login as',
                    required=True, choices=valid_domains(STAGE))


if __name__ == '__main__':
    ARGS = PARSER.parse_args()
    main(domain=ARGS.domain, stage=ARGS.stage)

